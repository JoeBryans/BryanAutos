// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

model User {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  email           String   @unique
  firstname       String
  lastname        String
  image           String?
  password        String
  phone           String?
  verifyToken     Int?
  credit          Int?     @default(2)
  emailVerified   Boolean  @default(false)
  verifyExpiresAt DateTime @default(now()) @db.Date
  createdAt       DateTime @default(now()) @db.Date
  updatedAt       DateTime @default(now()) @db.Date

  saved        UserSavedCar[]
  reservations UserReservation[]
  // cars      Car[]
  TestDrive    TestDrive[]
}

model Car {
  id             String            @id @default(auto()) @map("_id") @db.ObjectId
  sku            String?
  make           String
  model          String
  year           Int
  interior_color String?
  external_color String
  image          Json?
  transmission   String
  driveType      String?
  engine         String?
  // fuelEconomy    String?
  fuelType       String
  mileage        Int
  price          Int
  seats          Int
  bodyType       String
  description    String
  featured       Boolean           @default(false)
  features       Json?
  conditions     String            @default("new")
  saved          Boolean           @default(false)
  status         CarStatus         @default(Available)
  savedBy        UserSavedCar[]
  reservations   UserReservation[]
  // Deler     User     @relation(fields: [DelerId], references: [id])
  // DelerId   String   @unique
  TestDrive      TestDrive[]
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  @@index([make, model, year])
  @@index([price])
  @@index([status])
  @@index([conditions])
  @@index([featured])
  @@index([fuelType])
  @@index([bodyType])
  @@index([transmission])
  @@index([seats])
  @@index([sku])
}

enum CarStatus {
  Available
  Pending
  Sold
}

model UserSavedCar {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  carId     String   @db.ObjectId
  car       Car      @relation(fields: [carId], references: [id])
  createdAt DateTime @default(now())
}

model UserReservation {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
  carId  String @db.ObjectId
  car    Car    @relation(fields: [carId], references: [id])
}

model TestDrive {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId         String   @db.ObjectId
  user           User     @relation(fields: [userId], references: [id])
  carId          String   @db.ObjectId
  car            Car      @relation(fields: [carId], references: [id])
  selectedDate   DateTime
  selectedTime   String?
  email          String?
  additionalNote String?
  desiredVehicle String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([carId])
}
